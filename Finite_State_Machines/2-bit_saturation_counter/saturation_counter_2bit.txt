--------------
sat_count_2b.v
--------------

module sat_count_2b(
	//Inputs
	input clock,
	input reset,
	input decision,

	//Output
	output reg [1:0] status
);

//State Encoding

	localparam STRONGLY_NOT_TAKEN = 2'b00,
			   WEAKLY_NOT_TAKEN = 2'b01,
			   WEAKLY_TAKEN = 2'b10,
			   STRONGLY_TAKEN = 2'b11;

//State Registers
	reg [1:0] currentState;
	reg [1:0] nextState;

//Output
	always@(*) begin
		status = 2'b00; //Default State: STRONGLY NOT TAKEN
		case(currentState)
			WEAKLY_NOT_TAKEN : status = 2'b01;	
			WEAKLY_TAKEN : status = 2'b10;
			STRONGLY_TAKEN : status = 2'b11;
		endcase
	end

//Synchronous state-transition block
	always@(posedge clock or negedge reset) begin //ACTIVE LOW RESET 
		if(!reset) currentState <= STRONGLY_NOT_TAKEN; //Default state after reset
		else currentState <= nextState;
	end

//State transition logic
	always@(*) begin
		case(currentState)
			STRONGLY_NOT_TAKEN : begin
				if(decision) nextState = WEAKLY_NOT_TAKEN;
				else nextState = currentState;
			end
			
			WEAKLY_NOT_TAKEN : begin
				if(decision) nextState = WEAKLY_TAKEN;
				else nextState = STRONGLY_NOT_TAKEN;
			end

			WEAKLY_TAKEN : begin
				if(decision) nextState = STRONGLY_TAKEN;
				else nextState = WEAKLY_NOT_TAKEN;
			end

			STRONGLY_TAKEN : begin
				if(decision) nextState = currentState;
				else nextState = WEAKLY_TAKEN;
			end
		endcase

	end

endmodule

______________________________________________________________________________________________________


--------------
tb_sat_count.v
--------------

`include "sat_count_2b.v"
module tb;
	//Inputs
	reg clk, rst, dcn;
	integer seed;
	//Output
	wire [1:0] stat;
	
	//Parameters for states
	localparam STRONGLY_NOT_TAKEN = 2'b00,
			   WEAKLY_NOT_TAKEN = 2'b01,
			   WEAKLY_TAKEN = 2'b10,
			   STRONGLY_TAKEN = 2'b11;
	
	//Instantiation by name
	sat_count_2b dut(.clock(clk),.reset(rst),.decision(dcn),.status(stat));

	//Clock generation
	initial begin
		clk = 0;
		forever #5 clk = ~clk; //Time period = 10 units
	end
	
	//Applying reset
	initial begin
		rst = 0;//Active Low reset for 2 clock cycles
		@(posedge clk);
		@(posedge clk);
		rst = 1; //Release reset
	end
	
	//Applying inputs
	initial begin
		$dumpfile("out.vcd");
		$dumpvars(0,tb);
		seed = 777;
		repeat(35) begin
			dcn = $random(seed);
			$display("%t :\t RESET = %b :\t CLOCK = %b :\t DECISION = %s :\t STATE = %s",$time,rst,clk,
			dcn == 0 ? "Not Taken": "Taken",
			
			stat == STRONGLY_NOT_TAKEN ? "[STRONGLY NOT TAKEN]":
			stat == WEAKLY_NOT_TAKEN ? "[WEAKLY NOT TAKEN]":
			stat == WEAKLY_TAKEN ? "[WEAKLY TAKEN]":
			stat == STRONGLY_TAKEN ? "[STRONGLY TAKEN]" : " "
			);
			#10;
		end
		$finish;
	end

endmodule


